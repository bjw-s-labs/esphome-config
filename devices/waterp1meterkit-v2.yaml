# Device: Smarthomeshop.io WaterP1MeterKit V2
# Config is based on https://github.com/smarthomeshop/waterp1meterkit/blob/main/waterp1meterkit-v2/waterp1meterkit-ethernet.yaml
#

packages:
  <<: !include_dir_named ../components/common
  board: !include ../boards/esp32dev.yaml
  bluetooth_proxy: !include ../components/hardware/bluetooth_proxy.yaml

substitutions:
  host_name: "${host_name}"
  dsmr_output_port: "8088"

preferences:
  flash_write_interval: 5min

ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO17_OUT
  phy_addr: 1
  power_pin: GPIO33
  use_address: "${host_name}"

# I²C Bus
i2c:
  sda: GPIO15
  scl: GPIO4
  scan: true
  frequency: 400kHz

#LED for measure status
output:
  - platform: ledc
    pin: GPIO13
    id: output_led_green
  - platform: ledc
    pin: GPIO05
    id: output_led_red
  - platform: ledc
    pin: GPIO14
    id: output_led_blue

light:
  - platform: monochromatic
    id: light_led_green
    output: output_led_green
  - platform: status_led
    id: light_led_red
    output: output_led_red
  - platform: monochromatic
    id: light_led_blue
    output: output_led_blue

# DSMR part
uart:
  id: uart_dsmr
  rx_pin:
    number: GPIO16
    inverted: true
  baud_rate: 115200
  rx_buffer_size: 1700

dsmr:
  uart_id: uart_dsmr
  id: dsmr_instance
  max_telegram_length: 1700
  request_pin: GPIO12
  gas_mbus_id: 2

# Sensors
sensor:
  - platform: dsmr
    energy_delivered_tariff1:
      id: dsmr_electricity_delivered_1
      name: "Energy Consumed Tariff 1"
      state_class: total_increasing
    energy_returned_tariff1:
      id: dsmr_electricity_returned_1
      name: "Energy Produced Tariff 1"
      state_class: total_increasing
    energy_delivered_tariff2:
      id: dsmr_electricity_delivered_2
      name: "Energy Consumed Tariff 2"
      state_class: total_increasing
    energy_returned_tariff2:
      id: dsmr_electricity_returned_2
      name: "Energy Produced Tariff 2"
      state_class: total_increasing
    power_delivered:
      accuracy_decimals: 3
      id: dsmr_electricity_currently_delivered
      name: "Power Consumed"
    power_returned:
      accuracy_decimals: 3
      id: dsmr_electricity_currently_returned
      name: "Power Produced"
    voltage_l1:
      id: dsmr_phase_voltage_l1
      name: "Voltage Phase 1"
    voltage_l2:
      id: dsmr_phase_voltage_l2
      name: "Voltage Phase 2"
    voltage_l3:
      id: dsmr_phase_voltage_l3
      name: "Voltage Phase 3"
    current_l1:
      id: dsmr_phase_power_current_l1
      name: "Current Phase 1"
    current_l2:
      id: dsmr_phase_power_current_l2
      name: "Current Phase 2"
    current_l3:
      id: dsmr_phase_power_current_l3
      name: "Current Phase 3"
    power_delivered_l1:
      accuracy_decimals: 3
      id: dsmr_phase_currently_delivered_l1
      name: "Power Consumed Phase 1"
    power_delivered_l2:
      accuracy_decimals: 3
      id: dsmr_phase_currently_delivered_l2
      name: "Power Consumed Phase 2"
    power_delivered_l3:
      accuracy_decimals: 3
      id: dsmr_phase_currently_delivered_l3
      name: "Power Consumed Phase 3"
    power_returned_l1:
      accuracy_decimals: 3
      id: dsmr_phase_currently_returned_l1
      name: "Power Produced Phase 1"
    power_returned_l2:
      accuracy_decimals: 3
      id: dsmr_phase_currently_returned_l2
      name: "Power Produced Phase 2"
    power_returned_l3:
      accuracy_decimals: 3
      id: dsmr_phase_currently_returned_l3
      name: "Power Produced Phase 3"
    gas_delivered:
      id: dsmr_extra_device_delivered
      name: "Gas Consumed"
      state_class: total_increasing
  - platform: template
    id: dsmr_electricity_currently_delivered_watt
    name: Power Consumed (W)
    update_interval: 1s
    accuracy_decimals: 0
    unit_of_measurement: W
    device_class: power
    lambda: |-
      if (id(dsmr_electricity_currently_delivered).state) {
        return (id(dsmr_electricity_currently_delivered).state * 1000);
      } else {
        return 0;
      }
  - platform: template
    id: dsmr_electricity_currently_returned_watt
    name: Power Produced (W)
    update_interval: 1s
    accuracy_decimals: 0
    unit_of_measurement: W
    device_class: power
    lambda: |-
      if (id(dsmr_electricity_currently_returned).state) {
        return (id(dsmr_electricity_currently_returned).state * 1000);
      } else {
        return 0;
      }

  #WaterMeter sensor part
  - platform: pulse_meter
    id: sensor_pulse_meter
    name: "Water Current Usage"
    icon: "mdi:water-pump"
    unit_of_measurement: "L/min"
    internal_filter_mode: PULSE
    internal_filter: 200ms
    timeout: 2min
    accuracy_decimals: 1
    total:
      id: sensor_pulse_meter_total
      name: "Water Total Consumption"
      icon: "mdi:cube-outline"
      unit_of_measurement: "m³"
      state_class: total_increasing
      device_class: water
      accuracy_decimals: 3
      filters:
        - multiply: 0.001
    pin: GPIO32
    on_value:
      then:
        - light.turn_on:
            id: light_led_green
            flash_length: 1s

  #HDC1080 temp & hum sensor
  - platform: hdc1080
    temperature:
      id: sensor_temperature
      name: "Temperature"
      filters:
        offset: -4.5
    humidity:
      id: sensor_humidity
      name: "Humidity"
      filters:
        offset: 12
    update_interval: 60s

text_sensor:
  - platform: dsmr
    identification:
      name: Identification
    p1_version:
      name: Version
    timestamp:
      id: dsmr_timestamp
      internal: true
  - platform: template
    id: dsmr_timestamp_formatted
    internal: true
    update_interval: 2s
    lambda: |-
      esphome::optional<std::string> result;
      std::string input = id(dsmr_timestamp).state;
      if (!input.empty()) {
        std::string year = "20" + input.substr(0, 2);
        std::string month = input.substr(2, 2);
        std::string day = input.substr(4, 2);
        std::string hour = input.substr(6, 2);
        std::string minute = input.substr(8, 2);
        std::string second = input.substr(10, 2);
        std::string indicator = input.substr(12, 1);
        std::string timezone = "+00:00";
        if (indicator == "W") {
          timezone = "+01:00";
        } else if (indicator == "S") {
          timezone = "+02:00";
        }
        result = year + "-" + month + "-" + day + "T" + hour + ":" + minute + ":" + second + timezone;
      }
      return result;
